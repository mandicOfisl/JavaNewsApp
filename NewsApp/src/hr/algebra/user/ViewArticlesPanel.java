/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.user;

import hr.algebra.dal.Repo;
import hr.algebra.dal.RepoFactory;
import hr.algebra.model.Article;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.List;
import java.util.Optional;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author C
 */
public class ViewArticlesPanel extends javax.swing.JPanel {

    private final int userId;
    
    private DefaultListModel<Article> articlesModel;
    private DefaultListModel<Article> favArticlesModel;
    private Repo repo;
    /**
     * Creates new form ViewArticlesPanel
     * @param userId
     */
    public ViewArticlesPanel(int userId) {
        this.userId = userId;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReadArticle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listArticles = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listFav = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        btnRmvFav = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1100, 700));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnReadArticle.setText("Read article");
        btnReadArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadArticleActionPerformed(evt);
            }
        });

        listArticles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listArticles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listArticlesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listArticles);

        jLabel1.setText("All articles");

        listFav.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFavMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listFav);

        jLabel2.setText("Favourite articles");

        btnRmvFav.setText("Remove from favourites");
        btnRmvFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRmvFavActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReadArticle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRmvFav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(btnReadArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRmvFav, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReadArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadArticleActionPerformed
        openArticle();
    }//GEN-LAST:event_btnReadArticleActionPerformed

    private void openArticle() {
        if (listArticles.getSelectedIndex() > -1) {
            Article article = listArticles.getSelectedValue();
            ReadArticle ra = new ReadArticle(article);
            ra.setVisible(true);
        }
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnRmvFavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRmvFavActionPerformed
        if (listFav.getSelectedIndex() > -1) {
            int id = listFav.getSelectedValue().getId();
            try {
                repo.removeFavouriteArticle(userId, id);
                loadModel();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error deleting favourite article.");
            }            
        }
    }//GEN-LAST:event_btnRmvFavActionPerformed

    private void listFavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFavMouseClicked
        if (evt.getClickCount() == 2) {
            if (listFav.getSelectedIndex() > -1) {
                Article article = listFav.getSelectedValue();
                ReadArticle ra = new ReadArticle(article);
                ra.setVisible(true);
            }
        }
    }//GEN-LAST:event_listFavMouseClicked

    private void listArticlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listArticlesMouseClicked
        if (evt.getClickCount() == 2) {
            openArticle();
        }
    }//GEN-LAST:event_listArticlesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReadArticle;
    private javax.swing.JButton btnRmvFav;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Article> listArticles;
    private javax.swing.JList<Article> listFav;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepo();
            initDnD();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("No articles", "Please reload articles");
        }        
    }

    private void initRepo() throws Exception {
        try {
            repo = RepoFactory.getRepo();
        } catch (Exception exception) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
        articlesModel = new DefaultListModel<>();
        favArticlesModel = new DefaultListModel<>();
        loadModel();
    }

    private void loadModel() throws Exception {
        List<Article> articles = repo.selectArticles();
        if (articles.size() > 0) {
            articlesModel.clear();            
            articles.forEach(article -> articlesModel.addElement(article));
            listArticles.setModel(articlesModel);
        } else {
            throw new Exception();
        }
        
        List<Article> favs = repo.selectFavouriteArticles(userId);
        if (favs.size() > 0) {
            favArticlesModel.clear();
            favs.forEach(f -> favArticlesModel.addElement(f));
            listFav.setModel(favArticlesModel);
        }     
    }

    private void initDnD() {
        listArticles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listArticles.setDragEnabled(true);
        listArticles.setTransferHandler(new ExportTransferHandler());
        
        listFav.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listFav.setDropMode(DropMode.ON);
        listFav.setTransferHandler(new ImportTransferHandler());
    }
    
    private class ExportTransferHandler extends TransferHandler {
        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new StringSelection(String.valueOf(listArticles.getSelectedValue().getId()));
        }
    }
    
    private class ImportTransferHandler extends TransferHandler {
        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.stringFlavor);
        }
        
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);
                Optional<Article> a = repo.selectArticle(Integer.parseInt(data));
                
                if (a.isPresent()) {
                    if (!favArticlesModel.contains(a.get())) {
                        
                        repo.addFavouriteArticle(userId, a.get().getId());
                        
                        favArticlesModel.addElement(a.get());
                        listFav.setModel(favArticlesModel);
                        return true;
                    }
                }
            } catch (UnsupportedFlavorException ex) {
                MessageUtils.showErrorMessage("Error", "Error performing drag and drop action.");
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error adding favourite article");
            }
            return false;
        }
    }

}
